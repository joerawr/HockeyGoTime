/**
 * Redis key patterns and constants for analytics system
 * Feature: 006-privacy-analytics-dashboard
 *
 * Key naming convention: analytics:<metric>:<granularity>:<date>
 * All keys are prefixed with "analytics:" for easy isolation and cleanup
 */

/**
 * TTL (Time To Live) values in seconds
 * Determines automatic deletion schedule for metrics
 */
export const TTL_SECONDS = {
  DAILY: 90 * 24 * 60 * 60, // 90 days = 7,776,000 seconds
  WEEKLY: 365 * 24 * 60 * 60, // 365 days = 31,536,000 seconds
  MONTHLY: 730 * 24 * 60 * 60, // 730 days (2 years) = 63,072,000 seconds
} as const;

/**
 * Redis key pattern generators
 * Each function returns a Redis key following the analytics key naming convention
 */
export const KEY_PATTERNS = {
  /**
   * Conversation counter key
   * Tracks total number of conversations per day
   *
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:conversations:daily:2025-10-15")
   */
  CONVERSATIONS: (date: string): string =>
    `analytics:conversations:daily:${date}`,

  /**
   * Token input counter key
   * Tracks input tokens consumed by a specific model
   *
   * @param modelName - AI model identifier (e.g., "gemini-2.5-flash")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:tokens:gemini-2.5-flash:input:daily:2025-10-15")
   */
  TOKEN_INPUT: (modelName: string, date: string): string =>
    `analytics:tokens:${modelName}:input:daily:${date}`,

  /**
   * Token output counter key
   * Tracks output tokens generated by a specific model
   *
   * @param modelName - AI model identifier (e.g., "gemini-2.5-flash")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:tokens:gemini-2.5-flash:output:daily:2025-10-15")
   */
  TOKEN_OUTPUT: (modelName: string, date: string): string =>
    `analytics:tokens:${modelName}:output:daily:${date}`,

  /**
   * Tool call counter key
   * Tracks number of times a specific MCP tool was invoked
   *
   * @param toolName - MCP tool identifier (e.g., "get_schedule")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:tools:get_schedule:daily:2025-10-15")
   */
  TOOL_CALL: (toolName: string, date: string): string =>
    `analytics:tools:${toolName}:daily:${date}`,

  /**
   * Response time P95 key
   * Tracks 95th percentile response time for an endpoint
   *
   * @param endpoint - API route path (e.g., "/api/hockey-chat")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:performance:response_time_p95:/api/hockey-chat:daily:2025-10-15")
   */
  RESPONSE_TIME_P95: (endpoint: string, date: string): string =>
    `analytics:performance:response_time_p95:${endpoint}:daily:${date}`,

  /**
   * Error counter key
   * Tracks number of failed requests for an endpoint
   *
   * @param endpoint - API route path (e.g., "/api/hockey-chat")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:errors:/api/hockey-chat:daily:2025-10-15")
   */
  ERROR_COUNT: (endpoint: string, date: string): string =>
    `analytics:errors:${endpoint}:daily:${date}`,

  /**
   * Success counter key
   * Tracks number of successful requests for an endpoint
   *
   * @param endpoint - API route path (e.g., "/api/hockey-chat")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:success:/api/hockey-chat:daily:2025-10-15")
   */
  SUCCESS_COUNT: (endpoint: string, date: string): string =>
    `analytics:success:${endpoint}:daily:${date}`,

  /**
   * External API call counter key
   * Tracks number of calls to third-party APIs
   *
   * @param apiName - External API identifier (e.g., "google-routes")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:external_api:google-routes:daily:2025-10-15")
   */
  EXTERNAL_API_CALL: (apiName: string, date: string): string =>
    `analytics:external_api:${apiName}:daily:${date}`,

  /**
   * External API error counter key
   * Tracks failed calls to third-party APIs
   *
   * @param apiName - External API identifier (e.g., "google-routes")
   * @param date - Date in YYYY-MM-DD format
   * @returns Redis key (e.g., "analytics:external_api_errors:google-routes:daily:2025-10-15")
   */
  EXTERNAL_API_ERROR: (apiName: string, date: string): string =>
    `analytics:external_api_errors:${apiName}:daily:${date}`,
} as const;

/**
 * Model pricing configuration
 * Cost per 1 million tokens for each AI model
 */
export const MODEL_PRICING = {
  "gemini-2.5-flash": {
    inputPricePerMillion: 0.3, // $0.30 per 1M input tokens
    outputPricePerMillion: 2.5, // $2.50 per 1M output tokens
  },
  // Add more models as needed
} as const;

/**
 * External API pricing configuration
 * Cost per API call for third-party services
 */
export const EXTERNAL_API_PRICING = {
  "google-routes": {
    costPerCall: 0.005, // $0.005 per Routes API request
  },
  // Add more external APIs as needed
} as const;

/**
 * Supported AI model names
 */
export type SupportedModel = keyof typeof MODEL_PRICING;

/**
 * Analytics endpoints for API routes
 */
export const ANALYTICS_ENDPOINTS = {
  HOCKEY_CHAT: "/api/hockey-chat",
  ANALYTICS_MAIN: "/api/analytics",
  ANALYTICS_COST: "/api/analytics/cost",
  ANALYTICS_FEATURES: "/api/analytics/feature-breakdown",
  ANALYTICS_PERFORMANCE: "/api/analytics/performance",
} as const;

/**
 * Date validation regex
 * Ensures dates match YYYY-MM-DD format
 */
export const DATE_FORMAT_REGEX = /^\d{4}-\d{2}-\d{2}$/;

/**
 * Maximum date range for queries (days)
 * Prevents DOS attacks by limiting query scope
 */
export const MAX_DATE_RANGE_DAYS = 90;

/**
 * Cache TTL for dashboard queries (seconds)
 * Client-side caching to reduce Redis load
 */
export const DASHBOARD_CACHE_TTL = 30; // 30 seconds

/**
 * App timezone for consistent date handling
 * All analytics tracking uses America/Los_Angeles to match user base
 */
export const APP_TIMEZONE = "America/Los_Angeles";

/**
 * Get current date in app timezone (PST/PDT)
 *
 * Returns date in YYYY-MM-DD format using America/Los_Angeles timezone.
 * This ensures consistent tracking regardless of server location.
 *
 * @returns Date string in YYYY-MM-DD format (e.g., "2025-10-20")
 */
export function getCurrentDateInAppTimezone(): string {
  const now = new Date();
  const formatter = new Intl.DateTimeFormat("en-US", {
    timeZone: APP_TIMEZONE,
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  });
  const parts = formatter.formatToParts(now);
  const year = parts.find((p) => p.type === "year")!.value;
  const month = parts.find((p) => p.type === "month")!.value;
  const day = parts.find((p) => p.type === "day")!.value;
  return `${year}-${month}-${day}`;
}
